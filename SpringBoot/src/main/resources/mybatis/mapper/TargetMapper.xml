<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.TargetDao">
    <!-- 개인형 목표 추가하기-->
    <insert id="insertTarget" useGeneratedKeys="true" keyProperty="target_no">
        INSERT INTO target (mile_no, user_no, start_date, end_date, target_mileage, is_together, is_manager_plan)
        VALUES (#{mile_no}, #{user_no}, #{start_date}, #{end_date}, #{target_mileage}, #{is_together}, #{is_manager_plan})
    </insert>

    <insert id="insertUserTarget">
        INSERT INTO user_target (user_no, target_no, mile_no, start_date, end_date, target_mileage, is_together)
        VALUES (#{user_no}, #{target_no}, #{mile_no}, #{start_date}, #{end_date}, #{target_mileage}, #{is_together})
    </insert>

    <!-- 개인형 목표 불러오기-->
    <select id="getTargetsByUserNo" parameterType="string" resultType="com.kbstar.mileEasy.dto.Target">
        SELECT
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name,

            -- 로그인한 사용자의 현재 마일리지에서 initial_mileage를 뺀 값 (달성한 마일리지)
            (
                SELECT COALESCE(SUM(ms.mile_score_point), 0) - (
                    SELECT COALESCE(ut.initial_mileage, 0)
                    FROM user_target ut
                    WHERE ut.user_no = #{userNo}
                      AND ut.target_no = t.target_no
                           LIMIT 1
            )
        FROM mile_score ms
        WHERE ms.mile_no = t.mile_no
          AND ms.user_no = #{userNo}  -- 로그인한 사용자의 user_no 기준으로 필터링
            ) AS totalMileScoreByMileNo

        FROM target t
            LEFT JOIN mileage m ON t.mile_no = m.mile_no
        WHERE
            t.user_no = #{user_no}
          AND t.is_together = 0
        GROUP BY
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name
        ORDER BY
            t.mile_no ASC,
            t.start_date ASC;
    </select>


    <!-- 참여형 목표 불러오기 -->
    <select id="getAdminTargets" parameterType="string" resultType="com.kbstar.mileEasy.dto.Target">
        SELECT
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name,
            (SELECT COUNT(ut.user_no)
             FROM user_target ut
             WHERE ut.target_no = t.target_no
            ) AS participantCount,

            -- 로그인한 사용자의 현재 마일리지에서 initial_mileage를 뺀 값 (달성한 마일리지)
            (SELECT COALESCE(SUM(ms.mile_score_point), 0) - (
                SELECT ut.initial_mileage
                FROM user_target ut
                WHERE ut.user_no = #{userNo} AND ut.target_no = t.target_no
                        LIMIT 1
            )
        FROM mile_score ms
        WHERE ms.mile_no = t.mile_no
          AND ms.user_no = #{userNo}  -- 로그인한 사용자의 user_no 기준으로 필터링
            ) AS totalMileScoreByMileNo,

        -- achievementRate를 totalMileScoreByMileNo / target_mileage * 100으로 계산
        CASE
            WHEN t.target_mileage > 0 THEN
                ROUND(
                    (
                        (SELECT COALESCE(SUM(ms.mile_score_point), 0) - (
                            SELECT ut.initial_mileage
                            FROM user_target ut
                            WHERE ut.user_no = #{userNo} AND ut.target_no = t.target_no
            LIMIT 1
            )
            FROM mile_score ms
            WHERE ms.mile_no = t.mile_no
          AND ms.user_no = #{userNo}
            ) / t.target_mileage -- target_mileage로 나눔
            ) * 100, 2
            )
            ELSE 0
        END AS achievementRate

    FROM
        target t
    LEFT JOIN mileage m ON t.mile_no = m.mile_no
    WHERE
        t.is_manager_plan = true
      AND (t.is_together = 1 OR t.is_manager_plan = true)  -- is_together가 1이거나 is_manager_plan이 true인 경우
    GROUP BY
        t.target_no,
        t.mile_no,
        t.user_no,
        t.start_date,
        t.end_date,
        t.target_mileage,
        t.is_together,
        t.is_manager_plan,
        m.mile_name;
    </select>



    <!-- 사용자가 특정 타겟에 참여했는지 확인 -->
    <select id="checkUserParticipation" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM user_target
        WHERE target_no = #{targetNo}
          AND user_no = #{userNo}
    </select>

    <!-- 특정 목표 정보 가져오기 -->
    <select id="getTargetByNo" resultType="com.kbstar.mileEasy.dto.Target">
        SELECT
            target_no,
            mile_no,
            user_no,
            start_date,
            end_date,
            target_mileage,
            is_together,
            is_manager_plan
        FROM target
        WHERE target_no = #{targetNo}
    </select>

    <!-- 사용자 목표 참여 정보 추가하기 -->
    <insert id="joinUserTarget" parameterType="Usertarget">
        <!-- Step 1: 사용자 목표 참여 정보 삽입 -->
        INSERT INTO user_target (
        target_no,
        user_no,
        mile_no,
        start_date,
        end_date,
        target_mileage,
        is_together,
        initial_mileage
        )
        VALUES (
        #{target_no},
        #{user_no},
        #{mile_no},
        #{start_date},
        #{end_date},
        #{target_mileage},
        #{is_together},
        0  <!-- 일단 0으로 초기화 -->
        )
        ON DUPLICATE KEY UPDATE
        start_date = VALUES(start_date),
        end_date = VALUES(end_date),
        target_mileage = VALUES(target_mileage),
        is_together = VALUES(is_together);

        <!-- Step 2: initial_mileage 업데이트 -->
        UPDATE user_target
        SET initial_mileage = (
        SELECT COALESCE(SUM(ms.score), 0)
        FROM mile_score ms
        WHERE ms.user_no = #{user_no}
        AND ms.mile_no = #{mile_no}
        )
        WHERE user_no = #{user_no}
        AND target_no = #{target_no};
    </insert>


    <!-- 참여형 참가한 직원 목록 -->
    <select id="findUsersByTargetNo" resultType="map">
        SELECT u.user_no, u.user_name
        FROM user_target ut
                 JOIN user u ON ut.user_no = u.user_no
        WHERE ut.target_no = #{target_no}
    </select>

    <!-- UserTarget 삭제하기 -->
    <delete id="deleteUserTarget">
        DELETE FROM user_target WHERE user_no = #{userNo} AND target_no = #{targetNo}
    </delete>

    <!-- Target 삭제하기 -->
    <delete id="deleteTarget">
        DELETE FROM target WHERE user_no = #{userNo} AND target_no = #{targetNo}
    </delete>

    <!--마왕 점수 업그레이드-->
    <update id="updateMawangScore" parameterType="int">
        UPDATE user_target
        SET mawang_score = 1
        WHERE target_no = #{targetNo} AND user_no = #{userNo}
    </update>
</mapper>
