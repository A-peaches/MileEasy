<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.TargetDao">
    <!-- 개인형 목표 추가하기-->
    <insert id="insertTarget" useGeneratedKeys="true" keyProperty="target_no">
        INSERT INTO target (mile_no, user_no, start_date, end_date, target_mileage, is_together, is_manager_plan)
        VALUES (#{mile_no}, #{user_no}, #{start_date}, #{end_date}, #{target_mileage}, #{is_together}, #{is_manager_plan})
    </insert>

    <insert id="insertUserTarget">
        INSERT INTO user_target (user_no, target_no, mile_no, start_date, end_date, target_mileage, is_together)
        VALUES (#{user_no}, #{target_no}, #{mile_no}, #{start_date}, #{end_date}, #{target_mileage}, #{is_together})
    </insert>

    <!-- 개인형 목표 불러오기 -->





    <!-- 참여형 목표 불러오기 -->
    <select id="getAdminTargets" parameterType="string" resultType="com.kbstar.mileEasy.dto.Target">
        SELECT
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name,

            -- 참여자 수 계산
            (SELECT COUNT(ut.user_no)
             FROM user_target ut
             WHERE ut.target_no = t.target_no
            ) AS participantCount,

            -- 로그인한 사용자의 목표 기간 내 마일리지 합산 (달성한 마일리지)
            (
                SELECT COALESCE(SUM(mh.mile_history_point), 0)
                FROM mile_history mh
                WHERE mh.mile_no = t.mile_no
                  AND mh.user_no = #{userNo}
                  AND mh.mile_history_date BETWEEN t.start_date AND t.end_date  -- 목표 기간 내의 마일리지 합산
            ) AS totalMileScoreByMileNo,

            -- 달성률 계산 (달성 마일리지 / 목표 마일리지 * 100)
            CASE
                WHEN t.target_mileage > 0 THEN
                    FLOOR(
                            (
                                (
                                    SELECT COALESCE(SUM(mh.mile_history_point), 0)
                                    FROM mile_history mh
                                    WHERE mh.mile_no = t.mile_no
                                      AND mh.user_no = #{userNo}
                                      AND mh.mile_history_date BETWEEN t.start_date AND t.end_date  -- 목표 기간 내의 마일리지 합산
                                ) / t.target_mileage  -- 목표 마일리지로 나눔
                                ) * 100  -- 백분율로 변환
                    )
                ELSE 0
                END AS achievementRate

        FROM
            target t
                LEFT JOIN mileage m ON t.mile_no = m.mile_no
        WHERE
            t.is_manager_plan = true
          AND (t.is_together = 1 OR t.is_manager_plan = true)  -- is_together가 1이거나 is_manager_plan이 true인 경우
        GROUP BY
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name;
    </select>




    <!-- 사용자가 특정 타겟에 참여했는지 확인 -->
    <select id="checkUserParticipation" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM user_target
        WHERE target_no = #{targetNo}
          AND user_no = #{userNo}
    </select>

    <!-- 특정 목표 정보 가져오기 -->
    <select id="getTargetByNo" resultType="com.kbstar.mileEasy.dto.Target">
        SELECT
            target_no,
            mile_no,
            user_no,
            start_date,
            end_date,
            target_mileage,
            is_together,
            is_manager_plan
        FROM target
        WHERE target_no = #{targetNo}
    </select>

    <!-- 사용자 목표 참여 정보 삽입 (INSERT) -->
    <insert id="insertjoinTarget" parameterType="com.kbstar.mileEasy.dto.Usertarget">
        INSERT INTO user_target (
        target_no,
        user_no,
        mile_no,
        start_date,
        end_date,
        target_mileage,
        is_together,
        initial_mileage
        )
        VALUES (
        #{target_no},
        #{user_no},
        #{mile_no},
        #{start_date},
        #{end_date},
        #{target_mileage},
        #{is_together},
        0  <!-- 초기값을 0으로 설정 -->
        )
        ON DUPLICATE KEY UPDATE
        start_date = VALUES(start_date),
        end_date = VALUES(end_date),
        target_mileage = VALUES(target_mileage),
        is_together = VALUES(is_together);
    </insert>

    <!-- initial_mileage 업데이트 (UPDATE) -->
    <update id="updateInitialMileage">
        UPDATE user_target
        SET initial_mileage = (
            SELECT COALESCE(SUM(ms.mile_score_point), 0)
            FROM mile_score ms
            WHERE ms.user_no = #{user_no}
              AND ms.mile_no = #{mile_no}
        )
        WHERE user_no = #{user_no}
          AND target_no = #{target_no};
    </update>

    <!-- 참여형 참가한 직원 목록 -->
    <select id="findUsersByTargetNo" resultType="map">
        SELECT u.user_no, u.user_name
        FROM user_target ut
                 JOIN user u ON ut.user_no = u.user_no
        WHERE ut.target_no = #{target_no}
    </select>

    <!-- UserTarget 삭제하기 -->
    <delete id="deleteUserTarget">
        DELETE FROM user_target WHERE user_no = #{userNo} AND target_no = #{targetNo}
    </delete>

    <!-- Target 삭제하기 -->
    <delete id="deleteTarget">
        DELETE FROM target WHERE user_no = #{userNo} AND target_no = #{targetNo}
    </delete>

    <!--마왕 점수 업그레이드-->
    <update id="updateMawangScore" parameterType="int">
        UPDATE user_target
        SET mawang_score = 1
        WHERE target_no = #{targetNo} AND user_no = #{userNo}
    </update>

    <!-- 특정 목표(target_no)에 참가한 사용자의 목록, 달성률, 현재 마일리지 점수, 목표 마일리지 및 전화번호 조회 -->
    <select id="getParticipantsByTargetNo" parameterType="int" resultType="java.util.Map">
        SELECT
            ut.user_no,
            u.user_name,
            u.user_tel,
            ut.initial_mileage,
            t.target_mileage,

            -- start_mileage_score 계산
            (
                SELECT COALESCE(SUM(point_score), 0)
                FROM (
                         SELECT ms.mile_score_point AS point_score, ms.mile_score_date AS score_date
                         FROM mile_score ms
                         WHERE ms.mile_no = #{mileNo}
                           AND ms.mile_score_date &lt;= t.start_date
                         UNION ALL
                         SELECT mh.mile_history_point AS point_score, mh.mile_history_date AS score_date
                         FROM mile_history mh
                         WHERE mh.mile_no = #{mileNo}
                           AND mh.mile_history_date &lt;= t.start_date
                     ) AS combined_scores
                ORDER BY ABS(DATEDIFF(combined_scores.score_date, t.start_date)) ASC
                LIMIT 1
            ) AS start_mileage_score,

    -- current_mileage_score 계산
    (
        (
            -- 현재 마일리지 점수 계산 (mile_score와 mile_history 테이블에서 가장 가까운 날짜의 점수)
            SELECT COALESCE(SUM(point_score), 0)
            FROM (
                SELECT ms.mile_score_point AS point_score, ms.mile_score_date AS score_date
                FROM mile_score ms
                WHERE ms.mile_no = #{mileNo}
                AND ms.mile_score_date &lt;= NOW()
                UNION ALL
                SELECT mh.mile_history_point AS point_score, mh.mile_history_date AS score_date
            FROM mile_history mh
            WHERE mh.mile_no = #{mileNo}
                AND mh.mile_history_date &lt;= NOW()
                ) AS combined_scores
                ORDER BY combined_scores.score_date DESC
                LIMIT 1
                ) -
            -- 시작 시점의 마일리지 점수를 뺌
                (
                SELECT COALESCE(SUM(point_score), 0)
            FROM (
            SELECT ms.mile_score_point AS point_score, ms.mile_score_date AS score_date
            FROM mile_score ms
            WHERE ms.mile_no = #{mileNo}
                AND ms.mile_score_date &lt;= t.start_date
                UNION ALL
                SELECT mh.mile_history_point AS point_score, mh.mile_history_date AS score_date
            FROM mile_history mh
            WHERE mh.mile_no = #{mileNo}
                AND mh.mile_history_date &lt;= t.start_date
                ) AS combined_scores
                ORDER BY ABS(DATEDIFF(combined_scores.score_date, t.start_date)) ASC
            LIMIT 1
            )
            ) AS current_mileage_score,

            -- 달성률 계산
            CASE
            WHEN t.target_mileage &gt; 0 THEN
            FLOOR(
            (
            (
            -- 현재 마일리지 점수 계산 (start_mileage_score를 뺀 후 달성률 계산)
            SELECT COALESCE(SUM(point_score), 0)
            FROM (
            SELECT ms.mile_score_point AS point_score, ms.mile_score_date AS score_date
            FROM mile_score ms
            WHERE ms.mile_no = #{mileNo}
                AND ms.mile_score_date &lt;= NOW()
                UNION ALL
                SELECT mh.mile_history_point AS point_score, mh.mile_history_date AS score_date
            FROM mile_history mh
            WHERE mh.mile_no = #{mileNo}
                AND mh.mile_history_date &lt;= NOW()
                ) AS combined_scores
                ORDER BY combined_scores.score_date DESC
                LIMIT 1
                ) -
                (
                SELECT COALESCE(SUM(point_score), 0)
            FROM (
            SELECT ms.mile_score_point AS point_score, ms.mile_score_date AS score_date
            FROM mile_score ms
            WHERE ms.mile_no = #{mileNo}
                AND ms.mile_score_date &lt;= t.start_date
                UNION ALL
                SELECT mh.mile_history_point AS point_score, mh.mile_history_date AS score_date
            FROM mile_history mh
            WHERE mh.mile_no = #{mileNo}
                AND mh.mile_history_date &lt;= t.start_date
                ) AS combined_scores
                ORDER BY ABS(DATEDIFF(combined_scores.score_date, t.start_date)) ASC
            LIMIT 1
            )
            ) / t.target_mileage * 100
            )
            ELSE 0
        END AS achievementRate

    FROM
    user_target ut
    JOIN target t ON ut.target_no = t.target_no
    JOIN user u ON ut.user_no = u.user_no
    WHERE
    ut.target_no = #{targetNo}
        ORDER BYs
        achievementRate DESC;
    </select>




















</mapper>
