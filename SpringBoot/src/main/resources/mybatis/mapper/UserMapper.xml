<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">





<mapper namespace="com.kbstar.mileEasy.mapper.UserDao">
    <!--UserDao랑 연결되어있음-->
    <!--my batis 사용하기
    1. UserDao 만들어서 인터페이스 만들기! (리턴형태와 매개변수까지만!!  User selectUserById(String user_no); )
    2. Mapper에서 내용물 만들기 -> dao 인터페이스 이름과 동일하게 id설정해야됨!!!)
    3. 아래와 같이 쿼리문 작성하기

    -->
    <select id="selectUserById" parameterType="String" resultType="com.kbstar.mileEasy.dto.User">
        SELECT * FROM user WHERE user_no = #{user_no}
    </select>

    <select id ="selectAllUser" resultType="com.kbstar.mileEasy.dto.User"> <!--selectAllUser 실행 -->
        SELECT * FROM user;
    </select>

    <select id="checkedUser" parameterType="map" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_no,
            u.user_email,
            u.user_pw,
            u.user_name,
            u.user_profile,
            u.user_year,
            u.user_birth,
            d.dp_name AS dp_no,
            l.level_name AS level_no,
            j.job_name AS job_no,
            p.position_name AS position_no,
            u.user_is_delete,
            u.user_is_manager,
            u.user_is_admin,
            u.mile_no
        FROM
            user u
                JOIN department d ON u.dp_no = d.dp_no
                JOIN level l ON u.level_no = l.level_no
                JOIN job j ON u.job_no = j.job_no
                JOIN position p ON u.position_no = p.position_no
        WHERE
            u.user_no = #{user_no}
    </select>

    <select id="selectContactMileage" resultType="com.kbstar.mileEasy.dto.User">
        select user_no, user_name, mile_name, user_phone
        from user u join mileage m on u.mile_no = m.mile_no
        where user_is_manager=1;
    </select>

    <select id="selectContactMileEasy" resultType="com.kbstar.mileEasy.dto.User">
        select user_no, user_name, user_phone from user where user_is_admin=1;
    </select>

    <select id ="selectUserByEmail" resultType="com.kbstar.mileEasy.dto.User">
        SELECT * FROM user WHERE user_no = #{user_no};
    </select>

    <update id="updatePW">
        update user set user_pw = #{tempPw} where user_no = #{user_no};
    </update>


    <insert id="loginHistory">
        INSERT INTO login_history (user_no, login_date)
        VALUES (#{user_no}, CURRENT_DATE);
    </insert>

    <select id="loginHistoryCountArray"  resultType="com.kbstar.mileEasy.dto.LoginHistory" >
    <![CDATA[
        WITH RECURSIVE DateRange AS (
            SELECT CAST(#{startDate} AS DATE) AS login_date
            UNION ALL
            SELECT login_date + INTERVAL 1 DAY
        FROM DateRange
        WHERE login_date + INTERVAL 1 DAY <= #{endDate}
            )
        SELECT
            DateRange.login_date,
            COALESCE(COUNT(login_history.login_date), 0) AS count
        FROM
            DateRange
            LEFT JOIN
            login_history
        ON
            DateRange.login_date = login_history.login_date
        GROUP BY
            DateRange.login_date
        ORDER BY
            DateRange.login_date;
        ]]>
  </select>

    <select id="levelChartData" resultType="com.kbstar.mileEasy.dto.User">
        SELECT  COALESCE(COUNT(DISTINCT lh.user_no), 0) AS visitorCount
        FROM level l
                 LEFT JOIN (
            SELECT lh.user_no, u.level_no
            FROM login_history lh
                     JOIN user u ON lh.user_no = u.user_no
            WHERE lh.login_date = #{date}
        ) AS lh ON l.level_no = lh.level_no
        GROUP BY l.level_no
        ORDER BY l.level_no;
    </select>
    
    <select id="getileageAdminList" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_no,
            u.user_email,
            u.user_pw,
            u.user_name,
            u.user_profile,
            u.user_year,
            u.user_birth,
            d.dp_name AS dp_no,
            l.level_name AS level_no,
            j.job_name AS job_no,
            p.position_name AS position_no,
            u.user_is_delete,
            u.user_is_manager,
            u.user_is_admin,
            u.mile_no
        FROM
            user u
                JOIN department d ON u.dp_no = d.dp_no
                JOIN level l ON u.level_no = l.level_no
                JOIN job j ON u.job_no = j.job_no
                JOIN position p ON u.position_no = p.position_no
        WHERE
           u.user_is_manager = 1
          AND u.mile_no = #{mile_no};
    </select>

    <select id="searchUser" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_no,
            u.user_email,
            u.user_pw,
            u.user_name,
            u.user_profile,
            u.user_year,
            u.user_birth,
            d.dp_name AS dp_no,
            l.level_name AS level_no,
            j.job_name AS job_no,
            p.position_name AS position_no,
            u.user_is_delete,
            u.user_is_manager,
            u.user_is_admin,
            u.mile_no
        FROM
            user u
                JOIN department d ON u.dp_no = d.dp_no
                JOIN level l ON u.level_no = l.level_no
                JOIN job j ON u.job_no = j.job_no
                JOIN position p ON u.position_no = p.position_no
        WHERE
            u.user_is_manager = 0 and
            u.user_is_admin=0;

    </select>

    <update id="clearManager">
        UPDATE user
        SET mile_no = NULL,
            user_is_manager = 0
        WHERE mile_no = #{mileNo}
          AND user_is_manager = 1
    </update>

    <update id="newManager">
        UPDATE user
        SET
        user_is_manager = 1,
        mile_no = #{mileNo}
        WHERE
        user_no IN
        <foreach collection="adminList" item="userNo" open="(" separator="," close=")">
            #{userNo}
        </foreach>
        AND user_is_manager = 0
    </update>


    <insert id="insertMonthlyKings">
        INSERT INTO monthly_king (user_no, is_king, monthly_king_date)
        VALUES
        <foreach collection="king" item="userNo" separator=",">
            (#{userNo}, 1, CURDATE())
        </foreach>
        ON DUPLICATE KEY UPDATE
        is_king = VALUES(is_king),
        monthly_king_date = VALUES(monthly_king_date);
    </insert>

    <insert id="insertMonthlyJumps">
        INSERT INTO monthly_king (user_no, is_jump, monthly_king_date)
        VALUES
        <foreach collection="jump" item="userNo" separator=",">
            (#{userNo}, 1, CURDATE())
        </foreach>
        ON DUPLICATE KEY UPDATE
        is_jump = VALUES(is_jump),
        monthly_king_date = VALUES(monthly_king_date);
    </insert>

    <insert id="insertRequestMileage">
        INSERT INTO mileage_request (request_is_branch, request_mile_name, request_mil_max, request_admin, request_etc, request,user_no,mile_no,mileage_request_date)
        VALUES (#{isBranch}, #{mileName}, #{milMax}, #{admin}, #{etc}, #{request_no},#{user_no},#{mile_no},  current_timestamp)
    </insert>


    <update id="changPassword">
        update user set user_pw=#{encryptedPassword} where user_no = #{userNo}
    </update>
</mapper>
