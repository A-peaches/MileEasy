<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.ManagerDao">

    <select id="selectMileTitle" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_name,
            d.dp_name as dp_name,
            m.mile_name as mile_no
        FROM
            user u
                JOIN
            department d ON u.dp_no = d.dp_no
                LEFT JOIN
            mileage m ON u.mile_no = m.mile_no
        WHERE
            u.user_no = #{user_no};
    </select>

    <select id="selectMileDetail" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        SELECT * FROM mile_introduce WHERE mile_no = #{mile_no};
    </select>

    <insert id="insertMile">
        insert into mile_introduce (mile_no, mile_title, mile_content, mile_route) values (#{mile_no}, #{mile_title}, #{mile_content}, #{mile_route});
    </insert>

    <insert id="insertMileDetail">
        insert into mileage_detail (mile_no, mile_score_name, job_name) values (#{mile_no}, #{mile_title}, #{job_name});
    </insert>

    <delete id="deleteMile">
        delete from mile_introduce where mile_introduce_no=#{mile_introduce_no};
    </delete>

    <delete id="deleteMileDetail">
        DELETE md FROM mileage_detail md
        JOIN mile_introduce mi ON md.mile_score_name = mi.mile_title
        WHERE mi.mile_introduce_no = #{mile_introduce_no};
    </delete>

    <select id="selectModifyMile" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        select mile_title, mile_content, mile_route, mile_detail_no, job_name
        from mile_introduce mi
            join mileage_detail md on mile_score_name = mile_title
        where mi.mile_no=#{mile_no} and mi.mile_introduce_no=#{mile_introduce_no};
    </select>

    <update id="updateMile">
        update mile_introduce set mile_title=#{mile_title}, mile_content=#{mile_content}, mile_route=#{mile_route} where mile_introduce_no=#{mile_introduce_no};
    </update>

    <update id="updateMileDetail">
        UPDATE mileage_detail md
            JOIN mile_introduce mi ON md.mile_score_name = mi.mile_title
            SET md.job_name = #{job_name}
        where mi.mile_introduce_no = #{mile_introduce_no};
    </update>

    <select id="selectMileRecommand" resultType="com.kbstar.mileEasy.dto.MileRecommand">
        select * from mile_recommand where mile_no = #{mile_no};
    </select>

    <update id="updateRecommand">
        update mile_recommand set mile_mention=#{mile_mention} where mile_recommand_no=#{mile_recommand_no};
    </update>

    <insert id="insertRecommand">
        insert into mile_recommand (mile_no, mile_mention, mile_link)
        values (#{mile_no}, #{mile_mention}, (select m.mile_description from mileage m join mile_recommand r on m.mile_no=r.mile_no where m.mile_no=#{mile_no} group by mile_description));
    </insert>

    <delete id="deleteRecommand">
        delete from mile_recommand where mile_recommand_no=#{mile_recommand_no};
    </delete>

    <select id="mileCount" resultType="com.kbstar.mileEasy.dto.HitMile">
        <![CDATA[
        WITH RECURSIVE DateRange AS (
            SELECT CAST(#{start} AS DATE) AS hit_date
            UNION ALL
            SELECT hit_date + INTERVAL 1 DAY
        FROM DateRange
        WHERE hit_date + INTERVAL 1 DAY <= #{end}
            ),
            HitCounts AS (
        SELECT
            hit_date,
            hit_count
        FROM
            hit_mile
        WHERE
            mile_no = #{mile}
            )
        SELECT
            DateRange.hit_date,
            COALESCE(HitCounts.hit_count, 0) AS hit_count
        FROM
            DateRange
                LEFT JOIN
            HitCounts
            ON
                DateRange.hit_date = HitCounts.hit_date
        ORDER BY
            DateRange.hit_date;


        ]]>
    </select>

    <select id="visitCount" resultType="com.kbstar.mileEasy.beans.PageCount">
        SELECT
            DATE_FORMAT(hit_date, '%Y-%m') AS month,
    COALESCE(SUM(hit_count), 0) AS visits
        FROM
            hit_mile
        WHERE
            mile_no = #{mile_no}
          AND YEAR(hit_date) IN (YEAR(CURDATE()), YEAR(CURDATE()) - 1)
        GROUP BY
            DATE_FORMAT(hit_date, '%Y-%m')
        ORDER BY
            month;
    </select>


    <select id="mileageCount" resultType="com.kbstar.mileEasy.dto.MileScore">
         <![CDATA[
        SELECT
            CASE
                WHEN DATE_FORMAT(date, '%Y-%m') IS NULL THEN '0000-00'
                ELSE DATE_FORMAT(date, '%Y-%m')
                END AS month,
            COALESCE(SUM(CASE WHEN DATE_FORMAT(date, '%Y-%m') IS NULL THEN 0 ELSE mile_score_point END), 0) AS score_points,
            COALESCE(SUM(CASE WHEN DATE_FORMAT(date, '%Y-%m') IS NULL THEN 0 ELSE mile_history_point END), 0) AS history_points,
            COALESCE(SUM(CASE WHEN DATE_FORMAT(date, '%Y-%m') IS NULL THEN 0 ELSE mile_score_point END), 0) +
            COALESCE(SUM(CASE WHEN DATE_FORMAT(date, '%Y-%m') IS NULL THEN 0 ELSE mile_history_point END), 0) AS total_points
        FROM (
            SELECT mile_no, mile_score_point, mile_score_date AS date, NULL AS mile_history_point
            FROM mile_score
            WHERE mile_no = #{mile_no}
            AND YEAR(mile_score_date) IN (YEAR(CURDATE()), YEAR(CURDATE()) - 1)

            UNION ALL

            SELECT mile_no, NULL AS mile_score_point, mile_history_point, mile_history_date AS date
            FROM mile_history
            WHERE mile_no = #{mile_no}
            AND YEAR(mile_history_date) IN (YEAR(CURDATE()), YEAR(CURDATE()) - 1)
            ) AS combined
        GROUP BY month
        ORDER BY month
        ]]>
    </select>
</mapper>
