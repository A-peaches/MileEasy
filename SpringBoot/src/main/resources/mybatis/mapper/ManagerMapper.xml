<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.ManagerDao">

    <select id="selectMileTitle" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_name,
            u.user_profile,
            d.dp_name as dp_name,
            m.mile_name as mile_no
        FROM
            user u
                JOIN
            department d ON u.dp_no = d.dp_no
                LEFT JOIN
            mileage m ON u.mile_no = m.mile_no
        WHERE
            u.user_no = #{user_no};
    </select>

    <select id="selectMileDetail" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        SELECT * FROM mile_introduce WHERE mile_no = #{mile_no};
    </select>

    <insert id="insertMile">
        insert into mile_introduce (mile_no, mile_title, mile_content, mile_route) values (#{mile_no}, #{mile_title}, #{mile_content}, #{mile_route});
    </insert>

    <insert id="insertMileDetail">
        insert into mileage_detail (mile_no, mile_score_name, job_name) values (#{mile_no}, #{mile_title}, #{job_name});
    </insert>

    <delete id="deleteMile">
        delete from mile_introduce where mile_introduce_no=#{mile_introduce_no};
    </delete>

    <select id="selectModifyMile" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        select * from mile_introduce where mile_introduce_no = #{mile_introduce_no};
    </select>

    <update id="updateMile">
        update mile_introduce set mile_title=#{mile_title}, mile_content=#{mile_content}, mile_route=#{mile_route} where mile_introduce_no=#{mile_introduce_no};
    </update>

    <select id="selectMileRecommand" resultType="com.kbstar.mileEasy.dto.MileRecommand">
        select * from mile_recommand where mile_no = #{mile_no};
    </select>

    <update id="updateRecommand">
        update mile_recommand set mile_mention=#{mile_mention} where mile_recommand_no=#{mile_recommand_no};
    </update>

    <insert id="insertRecommand">
        insert into mile_recommand (mile_no, mile_mention, mile_link)
        values (#{mile_no}, #{mile_mention}, (select m.mile_description from mileage m join mile_recommand r on m.mile_no=r.mile_no where m.mile_no=#{mile_no} group by mile_description));
    </insert>

    <delete id="deleteRecommand">
        delete from mile_recommand where mile_recommand_no=#{mile_recommand_no};
    </delete>

    <select id="mileCount" resultType="com.kbstar.mileEasy.dto.HitMile">
        <![CDATA[
        WITH RECURSIVE DateRange AS (
            SELECT CAST(#{start} AS DATE) AS hit_date
            UNION ALL
            SELECT hit_date + INTERVAL 1 DAY
        FROM DateRange
        WHERE hit_date + INTERVAL 1 DAY <= #{end}
            ),
            HitCounts AS (
        SELECT
            hit_date,
            hit_count
        FROM
            hit_mile
        WHERE
            mile_no = #{mile}
            )
        SELECT
            DateRange.hit_date,
            COALESCE(HitCounts.hit_count, 0) AS hit_count
        FROM
            DateRange
                LEFT JOIN
            HitCounts
            ON
                DateRange.hit_date = HitCounts.hit_date
        ORDER BY
            DateRange.hit_date;


        ]]>
    </select>

    <select id="visitCount" resultType="com.kbstar.mileEasy.beans.PageCount">
        SELECT
            -- 현재 월 방문자 수
            COALESCE(SUM(CASE
                             WHEN DATE_FORMAT(hit_date, '%Y-%m') = #{startDate} THEN hit_count
                             ELSE 0
                END), 0) AS current_month_visits,

            -- 이전 월 방문자 수
            COALESCE(SUM(CASE
                             WHEN DATE_FORMAT(hit_date, '%Y-%m') = DATE_FORMAT(DATE_SUB(STR_TO_DATE(#{startDate}, '%Y-%m'), INTERVAL 1 MONTH), '%Y-%m') THEN hit_count
                             ELSE 0
                END), 0) AS previous_month_visits

        FROM
            hit_mile
        WHERE
            mile_no = #{mile_no}
          AND DATE_FORMAT(hit_date, '%Y-%m') IN (#{startDate}, DATE_FORMAT(DATE_SUB(STR_TO_DATE(#{startDate}, '%Y-%m'), INTERVAL 1 MONTH), '%Y-%m'));
    </select>


    <select id="mileageCount" resultType="com.kbstar.mileEasy.dto.MileScore">
    <![CDATA[
        SELECT
            COALESCE(current_month_score_points, 0) + COALESCE(current_month_history_points, 0) AS total_current_month_points,
            COALESCE(previous_month_score_points, 0) + COALESCE(previous_month_history_points, 0) AS total_previous_month_points
        FROM

            (SELECT
                 mile_no,
                 SUM(mile_score_point) AS current_month_score_points
             FROM mile_score
             WHERE mile_score_date = (
                 SELECT MAX(mile_score_date)
                 FROM mile_score
                 WHERE mile_score_date LIKE CONCAT(#{startDate}, '%')
                   AND mile_no = #{mile_no}
             )
               AND mile_no = #{mile_no}
             GROUP BY mile_no
            ) AS latest_score

                LEFT JOIN
            (SELECT
                 mile_no,
                 SUM(mile_history_point) AS current_month_history_points
             FROM mile_history
             WHERE mile_history_date = (
                 SELECT MAX(mile_history_date)
                 FROM mile_history
                 WHERE mile_history_date LIKE CONCAT(#{startDate}, '%')
                   AND mile_no = #{mile_no}
             )
               AND mile_no = #{mile_no}
             GROUP BY mile_no
            ) AS latest_history
            ON latest_score.mile_no = latest_history.mile_no

                LEFT JOIN

            (SELECT
                 mile_no,
                 SUM(mile_score_point) AS previous_month_score_points
             FROM mile_score
             WHERE mile_score_date = (
                 SELECT MAX(mile_score_date)
                 FROM mile_score
                 WHERE mile_score_date LIKE CONCAT(DATE_FORMAT(DATE_SUB(CONCAT(#{startDate}, '-01'), INTERVAL 1 MONTH), '%Y-%m'), '%')
                   AND mile_no = #{mile_no}
             )
               AND mile_no = #{mile_no}
             GROUP BY mile_no
            ) AS previous_month_score
            ON latest_score.mile_no = previous_month_score.mile_no

                LEFT JOIN

            (SELECT
                 mile_no,
                 SUM(mile_history_point) AS previous_month_history_points
             FROM mile_history
             WHERE mile_history_date = (
                 SELECT MAX(mile_history_date)
                 FROM mile_history
                 WHERE mile_history_date LIKE CONCAT(DATE_FORMAT(DATE_SUB(CONCAT(#{startDate}, '-01'), INTERVAL 1 MONTH), '%Y-%m'), '%')
                   AND mile_no = #{mile_no}
             )
               AND mile_no = #{mile_no}
             GROUP BY mile_no
            ) AS previous_month_history
            ON latest_score.mile_no = previous_month_history.mile_no
        ]]>
</select>

</mapper>
