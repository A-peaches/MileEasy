<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.ManagerDao">

    <select id="selectMileTitle" resultType="com.kbstar.mileEasy.dto.User">
        SELECT
            u.user_name,
            d.dp_name as dp_name,
            m.mile_name as mile_no
        FROM
            user u
                JOIN


            department d ON u.dp_no = d.dp_no
                LEFT JOIN
            mileage m ON u.mile_no = m.mile_no
        WHERE
            u.user_no = #{user_no};
    </select>

    <select id="selectMileDetail" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        SELECT * FROM mile_introduce WHERE mile_no = #{mile_no};
    </select>

    <select id="selectMileTarget" resultType="com.kbstar.mileEasy.dto.Target">
        <![CDATA[
        WITH RECURSIVE date_range AS (
            SELECT MIN(start_date) AS date
        FROM target
        WHERE mile_no = #{mile_no}
        UNION ALL
        SELECT date + INTERVAL 1 DAY
        FROM date_range
        WHERE date < CURDATE()
            ),
            user_mileage AS (
        SELECT
            t.target_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            ut.user_no,
            COALESCE(
            (SELECT SUM(mile_score_point)
            FROM mile_score ms
            WHERE ms.user_no = ut.user_no
            AND ms.mile_no = t.mile_no
            AND ms.mile_score_date BETWEEN t.start_date AND LEAST(t.end_date, CURDATE())),
            0
            ) +
            COALESCE(
            (SELECT SUM(mile_history_point)
            FROM mile_history mh
            WHERE mh.user_no = ut.user_no
            AND mh.mile_no = t.mile_no
            AND mh.mile_history_date BETWEEN t.start_date AND LEAST(t.end_date, CURDATE())),
            0
            ) AS total_mileage
        FROM target t
            LEFT JOIN user_target ut ON t.target_no = ut.target_no
        WHERE t.mile_no = #{mile_no} AND t.is_manager_plan = 1
            ),
            target_summary AS (
        SELECT
            um.target_no,
            um.start_date,
            um.end_date,
            um.target_mileage,
            COUNT(DISTINCT um.user_no) AS total_participants,
            COUNT(DISTINCT CASE WHEN um.total_mileage >= um.target_mileage THEN um.user_no END) AS achieved_participants
        FROM user_mileage um
        GROUP BY um.target_no, um.start_date, um.end_date, um.target_mileage
            ),
            closest_date AS (
        SELECT
            t.target_no,
            t.user_no,
            t.mile_no,
            t.start_date,
            COALESCE(
            (SELECT mh.mile_history_date
            FROM mile_history mh
            WHERE mh.user_no = t.user_no
            AND mh.mile_no = t.mile_no
            ORDER BY ABS(DATEDIFF(mh.mile_history_date, t.start_date))
            LIMIT 1),
            (SELECT ms.mile_score_date
            FROM mile_score ms
            WHERE ms.user_no = t.user_no
            AND ms.mile_no = t.mile_no
            ORDER BY ABS(DATEDIFF(ms.mile_score_date, t.start_date))
            LIMIT 1),
            t.start_date
            ) AS closest_date,
            CASE
            WHEN (SELECT mh.mile_history_date
            FROM mile_history mh
            WHERE mh.user_no = t.user_no
            AND mh.mile_no = t.mile_no
            ORDER BY ABS(DATEDIFF(mh.mile_history_date, t.start_date))
            LIMIT 1) <=
            (SELECT ms.mile_score_date
            FROM mile_score ms
            WHERE ms.user_no = t.user_no
            AND ms.mile_no = t.mile_no
            ORDER BY ABS(DATEDIFF(ms.mile_score_date, t.start_date))
            LIMIT 1)
            THEN 'mile_history'
            ELSE 'mile_score'
            END AS closest_table
        FROM target t
        WHERE t.is_together = 1
            )
        SELECT DISTINCT
            t.target_no,
            t.mile_no,
            t.user_no,
            t.start_date,
            t.end_date,
            t.target_mileage,
            t.is_together,
            t.is_manager_plan,
            m.mile_name,
            (SELECT COUNT(ut_inner.user_no)
             FROM user_target ut_inner
             WHERE ut_inner.target_no = t.target_no) AS totalParticipants,
            (SELECT COUNT(ut_inner.user_no)
             FROM user_target ut_inner
             WHERE ut_inner.target_no = t.target_no AND ut_inner.mawang_score = 1) AS achievedCount,
            (SELECT COUNT(ut_inner.user_no)
             FROM user_target ut_inner
             WHERE ut_inner.target_no = t.target_no AND ut_inner.mawang_score = 0) AS notAchievedCount,
            (SELECT GROUP_CONCAT(u_inner.user_name SEPARATOR ', ')
             FROM user_target ut_inner
                      JOIN user u_inner ON ut_inner.user_no = u_inner.user_no
             WHERE ut_inner.target_no = t.target_no AND ut_inner.mawang_score = 0) AS not_achieved_names,
            (SELECT GROUP_CONCAT(u_inner.user_tel SEPARATOR ', ')
             FROM user_target ut_inner
                      JOIN user u_inner ON ut_inner.user_no = u_inner.user_no
             WHERE ut_inner.target_no = t.target_no AND ut_inner.mawang_score = 0) AS not_achieved_phones
        FROM target t
                 LEFT JOIN user_target ut ON t.target_no = ut.target_no
                 LEFT JOIN mileage m ON t.mile_no = m.mile_no
                 LEFT JOIN target_summary ts ON t.target_no = ts.target_no
        WHERE t.mile_no = #{mile_no}  -- 이 조건을 추가해서 mile_no가 일치하는 데이터만 가져옴
        ORDER BY t.start_date ASC;

        ]]>
    </select>

    <insert id="insertTarget">
        insert into target (mile_no, user_no, start_date, end_date, target_mileage, is_together, is_manager_plan) values (#{mile_no},#{user_no},#{start_date},#{end_date},#{target_mileage},#{is_together},#{is_manager_plan});
    </insert>

    <insert id="insertMile">
        insert into mile_introduce (mile_no, mile_title, mile_content, mile_route) values (#{mile_no}, #{mile_title}, #{mile_content}, #{mile_route});
    </insert>

    <insert id="insertMileDetail">
        insert into mileage_detail (mile_no, mile_score_name, job_name) values (#{mile_no}, #{mile_title}, #{job_name});
    </insert>

    <delete id="deleteMile">
        delete from mile_introduce where mile_introduce_no=#{mile_introduce_no};
    </delete>

    <delete id="deleteTarget">
        delete from target where target_no = #{target_no};
    </delete>

    <delete id="deleteUserTarget">
        delete from user_target where target_no = #{target_no};
    </delete>

    <delete id="deleteMileDetail">
        DELETE md FROM mileage_detail md
        JOIN mile_introduce mi ON md.mile_score_name = mi.mile_title
        WHERE mi.mile_introduce_no = #{mile_introduce_no};
    </delete>

    <select id="selectModifyMile" resultType="com.kbstar.mileEasy.dto.MileIntroduce">
        select mile_title, mile_content, mile_route, mile_detail_no, job_name
        from mile_introduce mi
            join mileage_detail md on mile_score_name = mile_title
        where mi.mile_no=#{mile_no} and mi.mile_introduce_no=#{mile_introduce_no};
    </select>

    <update id="updateMile">
        update mile_introduce set mile_title=#{mile_title}, mile_content=#{mile_content}, mile_route=#{mile_route} where mile_introduce_no=#{mile_introduce_no};
    </update>

    <update id="updateMileDetail">
        UPDATE mileage_detail md
            JOIN mile_introduce mi ON md.mile_score_name = mi.mile_title
            SET md.job_name = #{job_name}
        where mi.mile_introduce_no = #{mile_introduce_no};
    </update>

    <select id="selectMileRecommand" resultType="com.kbstar.mileEasy.dto.MileRecommand">
        select * from mile_recommand where mile_no = #{mile_no};
    </select>

    <update id="updateRecommand">
        update mile_recommand set mile_mention=#{mile_mention} where mile_recommand_no=#{mile_recommand_no};
    </update>

    <insert id="insertRecommand">
        insert into mile_recommand (mile_no, mile_mention, mile_link)
        values (#{mile_no}, #{mile_mention}, (select m.mile_description from mileage m join mile_recommand r on m.mile_no=r.mile_no where m.mile_no=#{mile_no} group by mile_description));
    </insert>

    <delete id="deleteRecommand">
        delete from mile_recommand where mile_recommand_no=#{mile_recommand_no};
    </delete>

    <select id="mileCount" resultType="com.kbstar.mileEasy.dto.HitMile">
        <![CDATA[
        WITH RECURSIVE DateRange AS (
            SELECT CAST(#{start} AS DATE) AS hit_date
            UNION ALL
            SELECT hit_date + INTERVAL 1 DAY
        FROM DateRange
        WHERE hit_date + INTERVAL 1 DAY <= #{end}
            ),
            HitCounts AS (
        SELECT
            hit_date,
            hit_count
        FROM
            hit_mile
        WHERE
            mile_no = #{mile}
            )
        SELECT
            DateRange.hit_date,
            COALESCE(HitCounts.hit_count, 0) AS hit_count
        FROM
            DateRange
                LEFT JOIN
            HitCounts
            ON
                DateRange.hit_date = HitCounts.hit_date
        ORDER BY
            DateRange.hit_date;


        ]]>
    </select>

    <select id="visitCount" resultType="com.kbstar.mileEasy.beans.PageCount">
        <![CDATA[
        WITH RECURSIVE months AS (
        SELECT DATE_FORMAT(DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-01-01'), INTERVAL 1 YEAR), '%Y-%m') AS year_and_month
        UNION ALL
        SELECT DATE_FORMAT(DATE_ADD(CONCAT(year_and_month, '-01'), INTERVAL 1 MONTH), '%Y-%m')
        FROM months
        WHERE DATE_ADD(CONCAT(year_and_month, '-01'), INTERVAL 1 MONTH) <= CURDATE()
        )

        SELECT
        m.year_and_month,
        COALESCE(SUM(h.hit_count), 0) AS visits
        FROM
        months m
        LEFT JOIN (
        SELECT
        DATE_FORMAT(hit_date, '%Y-%m') AS year_and_month,
        hit_count
        FROM
        hit_mile
        WHERE
        mile_no = #{mile_no}
        AND hit_date >= DATE_FORMAT(DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-01-01'), INTERVAL 1 YEAR), '%Y-%m-%d')
        ) h ON m.year_and_month = h.year_and_month
        GROUP BY
        m.year_and_month
        ORDER BY
        m.year_and_month;
    ]]>
    </select>


    <select id="mileageCount" resultType="com.kbstar.mileEasy.dto.MileScore">
        SELECT
            DATE_FORMAT(date, '%Y-%m') AS year_and_month,
            COALESCE(SUM(mile_score_point), 0) AS total_score_points,
            COALESCE(SUM(mile_history_point), 0) AS total_history_points,
            COALESCE(SUM(mile_score_point), 0) + COALESCE(SUM(mile_history_point), 0) AS total_points
        FROM (
                 SELECT mile_score_date AS date, mile_score_point, NULL AS mile_history_point
                 FROM mile_score
                 WHERE mile_no = #{mile_no}
                   AND YEAR(mile_score_date) IN (YEAR(CURDATE()), YEAR(CURDATE()) - 1)

                 UNION ALL

                 SELECT mile_history_date AS date, NULL AS mile_score_point, mile_history_point
                 FROM mile_history
                 WHERE mile_no = #{mile_no}
                   AND YEAR(mile_history_date) IN (YEAR(CURDATE()), YEAR(CURDATE()) - 1)
             ) AS combined
        GROUP BY DATE_FORMAT(date, '%Y-%m')
        ORDER BY DATE_FORMAT(date, '%Y-%m');
    </select>
</mapper>
