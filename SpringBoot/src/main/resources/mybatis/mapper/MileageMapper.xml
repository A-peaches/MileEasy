<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kbstar.mileEasy.mapper.MileageDao">
    <select id ="getMileage" resultType="com.kbstar.mileEasy.dto.Mileage"> <!--selectAllUser 실행 -->
        SELECT * FROM mileage where mile_is_delete=0;
    </select>

    <select id="getMileScore" resultType="com.kbstar.mileEasy.dto.MileScore">
     <![CDATA[
        SELECT
        m.mile_name AS mile_no,
        COALESCE(s.mile_score_point, 0) AS mile_score_point,
        COALESCE(h.mile_prev_score, 0) AS mile_prev_score,
        r.mile_link
        FROM
        mile_recommand r
        LEFT JOIN mileage m ON r.mile_no = m.mile_no
        LEFT JOIN (
        SELECT mile_no, SUM(mile_score_point) AS mile_score_point
        FROM mile_score
        WHERE user_no = #{userNo}
        GROUP BY mile_no
        ) s ON s.mile_no = r.mile_no
        LEFT JOIN (
        SELECT mile_no, SUM(mile_history_point) AS mile_prev_score
        FROM mile_history
        WHERE user_no = #{userNo}
        AND mile_history_date = (
        SELECT MAX(mile_history_date)
        FROM mile_history
        WHERE user_no = '1653521'
        AND mile_history_date < DATE_FORMAT(CURRENT_DATE, '%Y-%m-01')
        )
        GROUP BY mile_no
        ) h ON h.mile_no = r.mile_no
        GROUP BY
        m.mile_name, r.mile_link, s.mile_score_point, h.mile_prev_score;
        ]]>
    </select>

    <select id="getHitMileCount" resultType="int">
        SELECT COUNT(*)
        FROM hit_mile
        WHERE mile_no = #{mile_no}
          AND hit_date = CURRENT_DATE;
    </select>

    <insert id="insertHitMile">
        INSERT INTO hit_mile (mile_no, hit_count, hit_date)
        VALUES (#{mile_no},1, CURRENT_DATE);
    </insert>

    <update id="updateMile">
        UPDATE hit_mile
        SET hit_count = hit_count + 1
        WHERE mile_no = #{mile_no} and hit_date = CURRENT_DATE;
    </update>

    <select id="getHitMile" resultType="com.kbstar.mileEasy.dto.HitMile">
        SELECT m.mile_no, m.mile_name, COALESCE(h.hit_count, 0) AS hit_count
        FROM mileage m
                 LEFT JOIN (
            SELECT mile_no, hit_count
            FROM hit_mile
            WHERE hit_date = DATE_SUB(CURRENT_DATE, INTERVAL 1 DAY)
        ) h ON m.mile_no = h.mile_no
        ORDER BY m.mile_no;
    </select>

    <select id="getHitMileDATE" resultType="com.kbstar.mileEasy.dto.HitMile">
        SELECT m.mile_no, m.mile_name, COALESCE(h.hit_count, 0) AS hit_count
        FROM mileage m
                 LEFT JOIN (
            SELECT mile_no, hit_count
            FROM hit_mile
            WHERE hit_date = #{date}
        ) h ON m.mile_no = h.mile_no
        where m.mile_is_delete = 0
        ORDER BY m.mile_no;
    </select>

    <select id="getRecommand" resultType="com.kbstar.mileEasy.dto.MileRecommand">
        SELECT *
        FROM mile_recommand
        WHERE mile_no = (
            SELECT mile_no
            FROM mile_score
            WHERE user_no = #{userNo}
            GROUP BY mile_no
            ORDER BY SUM(mile_score_point) ASC
            LIMIT 1
            );
    </select>

    <insert id="insertMileExcel">
        insert into mile_excel (mile_no, mile_excel_file) values ( #{mile_no}, #{mile_excel_file});
    </insert>

    <insert id="insertMileDocu">
        insert into Document_mile (mile_no, document_file) values (#{mile_no}, #{document_file});
    </insert>

    <insert id="moveMileScoreToHistory">
        insert into mile_history
            (user_no, mile_no, mile_history_date, mile_history_name, mile_history_point)
        select user_no, mile_no, mile_score_date, mile_score_name, mile_score_point
        from mile_score
        where mile_no=#{mile_no};
    </insert>

    <delete id="deleteAllMileScore">
        delete from mile_score where mile_no = #{mile_no};
    </delete>

    <delete id="deleteDocument">
        delete from Document_mile where document_mile_no = #{num}
    </delete>

    <insert id="insertDetailMileScore">
        insert into mile_score (user_no, mile_no, mile_score_date, mile_score_name, mile_score_point)
        values (#{user_no}, #{mile_no}, #{mile_score_date}, #{mile_score_name}, #{mile_score_point});
    </insert>

    <select id="selectMileExcel" resultType="com.kbstar.mileEasy.dto.MileExcel">
        select * from mile_excel where date(mile_excel_date) = #{selectedDate} and mile_no = #{mile_no} order by mile_excel_date DESC limit #{limit} offset #{offset};
    </select>

    <select id="selectTotalExcel" resultType="com.kbstar.mileEasy.dto.MileExcel">
        select * from mile_excel where mile_no = #{mile_no} order by mile_excel_date DESC limit #{limit} offset #{offset};
    </select>

    <select id="selectTotalDocument" resultType="com.kbstar.mileEasy.dto.DocumentMile">
        select * from Document_mile where mile_no=#{mile_no} order by document_date DESC limit #{limit} offset #{offset};
    </select>

    <select id="selectDocumentLists" resultType="com.kbstar.mileEasy.dto.DocumentMile">
        select * from Document_mile where mile_no=#{mile_no} order by document_date DESC;
    </select>

    <select id="selectCount" resultType="int">
        select count(mile_excel_no) from mile_excel where mile_no =#{mile_no};
    </select>

    <select id="selectCountDocu" resultType="int">
        select count(document_mile_no) from Document_mile where mile_no =#{mile_no};
    </select>

    <select id="selectMileSum" resultType="int">
        select count(document_mile_no) from Document_mile where mile_no=#{mile_no};
    </select>

    <select id="kingData" resultType="com.kbstar.mileEasy.dto.MileScore">
        <![CDATA[
        WITH user_list AS (
            SELECT user_no FROM user
        ),
             attendance_counts AS (
                 SELECT
                     u.user_no,
                     COALESCE(COUNT(a.user_no), 0) AS attendance_count
                 FROM user_list u
                          LEFT JOIN attendance a ON u.user_no = a.user_no
                     AND YEAR(a.attendance_date) = YEAR(CURDATE() - INTERVAL 1 DAY)
            AND MONTH(a.attendance_date) = MONTH(CURDATE() - INTERVAL 1 DAY)
        GROUP BY u.user_no
            ),
            mtip_board_counts AS (
        SELECT
            u.user_no,
            COALESCE(COUNT(m.user_no), 0) AS mtip_board_count
        FROM user_list u
            LEFT JOIN mtip_board m ON u.user_no = m.user_no
            AND YEAR(m.mtip_board_date) = YEAR(CURDATE() - INTERVAL 1 DAY)
            AND MONTH(m.mtip_board_date) = MONTH(CURDATE() - INTERVAL 1 DAY)
        GROUP BY u.user_no
            ),
            ranked_users AS (
        SELECT
            u.user_no,
            COALESCE(a.attendance_count, 0) AS attendance_count,
            COALESCE(m.mtip_board_count, 0) AS mtip_board_count,
            (COALESCE(a.attendance_count, 0) + (COALESCE(m.mtip_board_count, 0) * 20)) AS total_score,
            RANK() OVER (ORDER BY (COALESCE(a.attendance_count, 0) + COALESCE(m.mtip_board_count, 0) * 20) DESC) AS ranking
        FROM user_list u
            LEFT JOIN attendance_counts a ON u.user_no = a.user_no
            LEFT JOIN mtip_board_counts m ON u.user_no = m.user_no
            )
        SELECT
            ranking,
            COALESCE(u.user_name, 'Unknown User') AS user_name,
            total_score
        FROM ranked_users r
                 LEFT JOIN user u ON r.user_no = u.user_no
        WHERE ranking <= 5;


        ]]>
    </select>

    <select id="jumpData" resultType="com.kbstar.mileEasy.dto.MileScore">
        <![CDATA[
        WITH recent_month_scores AS (
            SELECT
                ms.user_no,
                SUM(ms.mile_score_point) AS recent_month_total_point,
                MAX(ms.mile_score_date) AS base_date
            FROM mile_score ms
            WHERE YEAR(ms.mile_score_date) = YEAR(CURDATE() - INTERVAL 1 DAY)
            AND MONTH(ms.mile_score_date) = MONTH(CURDATE() - INTERVAL 1 DAY)
        GROUP BY ms.user_no
            ),
            recent_previous_month_scores AS (
        SELECT
            mh.user_no,
            SUM(mh.mile_history_point) AS recent_previous_month_total_point,
            MAX(mh.mile_history_date) AS base_date
        FROM mile_history mh
        WHERE YEAR(mh.mile_history_date) = YEAR(CURDATE() - INTERVAL 1 DAY)
          AND MONTH(mh.mile_history_date) = MONTH(CURDATE() - INTERVAL 1 DAY) - 1
        GROUP BY mh.user_no
            ),
            user_scores AS (
        SELECT
            COALESCE(rms.user_no, rps.user_no) AS user_no,
            COALESCE(rms.recent_month_total_point, 0) AS recent_month_total_point,
            COALESCE(rps.recent_previous_month_total_point, 0) AS recent_previous_month_total_point,
            COALESCE(rms.base_date, rps.base_date) AS base_date
        FROM recent_month_scores rms
            LEFT JOIN recent_previous_month_scores rps ON rms.user_no = rps.user_no

        UNION ALL

        SELECT
            COALESCE(rms.user_no, rps.user_no) AS user_no,
            COALESCE(rms.recent_month_total_point, 0) AS recent_month_total_point,
            COALESCE(rps.recent_previous_month_total_point, 0) AS recent_previous_month_total_point,
            COALESCE(rms.base_date, rps.base_date) AS base_date
        FROM recent_month_scores rms
            RIGHT JOIN recent_previous_month_scores rps ON rms.user_no = rps.user_no
        WHERE rms.user_no IS NULL
            )
        SELECT
            RANK() OVER (ORDER BY (us.recent_month_total_point - us.recent_previous_month_total_point) DESC) AS ranking,
                u.user_name,
            us.recent_month_total_point - us.recent_previous_month_total_point AS score_increase,
            us.base_date
        FROM user_scores us
                 JOIN user u ON us.user_no = u.user_no
        ORDER BY ranking
            LIMIT 5;
        ]]>
    </select>

    <select id="kingDataSelect" resultType="com.kbstar.mileEasy.dto.MileScore">
        <![CDATA[

        WITH user_list AS (
            SELECT user_no
            FROM user
        ),
             attendance_counts AS (
                 SELECT
                     u.user_no,
                     COALESCE(COUNT(a.user_no), 0) AS attendance_count
                 FROM user_list u
                          LEFT JOIN attendance a ON u.user_no = a.user_no
                     AND YEAR(a.attendance_date) = YEAR(CURDATE() - INTERVAL 1 month)
            AND MONTH(a.attendance_date) = MONTH(CURDATE() - INTERVAL 1 month)
        GROUP BY u.user_no
            ),
            mtip_board_counts AS (
        SELECT
            u.user_no,
            COALESCE(COUNT(m.user_no), 0) AS mtip_board_count
        FROM user_list u
            LEFT JOIN mtip_board m ON u.user_no = m.user_no
            AND YEAR(m.mtip_board_date) = YEAR(CURDATE() - INTERVAL 1 month)
            AND MONTH(m.mtip_board_date) = MONTH(CURDATE() - INTERVAL 1 month)
        GROUP BY u.user_no
            ),
            ranked_users AS (
        SELECT
            u.user_no,
            COALESCE(a.attendance_count, 0) AS attendance_count,
            COALESCE(m.mtip_board_count, 0) AS mtip_board_count,
            (COALESCE(a.attendance_count, 0) + (COALESCE(m.mtip_board_count, 0) * 20)) AS total_score,
            RANK() OVER (ORDER BY (COALESCE(a.attendance_count, 0) + COALESCE(m.mtip_board_count, 0) * 20) DESC) AS ranking
        FROM user_list u
            LEFT JOIN attendance_counts a ON u.user_no = a.user_no
            LEFT JOIN mtip_board_counts m ON u.user_no = m.user_no
            )
        SELECT
            DATE_FORMAT(CURDATE() - INTERVAL 1 month, '%Y-%m') AS base_date,
            ranking,
            COALESCE(u.user_name, 'Unknown User') AS user_name,
            total_score,
            r.user_no
        FROM ranked_users r
                 LEFT JOIN user u ON r.user_no = u.user_no
        WHERE ranking <= 5;


        ]]>
    </select>

    <select id="jumpDataSelect" resultType="com.kbstar.mileEasy.dto.MileScore">
        <![CDATA[
        WITH recent_previous_month_scores AS (
            SELECT
                mh.user_no,
                SUM(mh.mile_history_point) AS recent_previous_month_total_point,
                MAX(mh.mile_history_date) AS base_date
            FROM mile_history mh
            WHERE YEAR(mh.mile_history_date) = YEAR(CURDATE())
            AND MONTH(mh.mile_history_date) = MONTH(CURDATE()) - 1
        GROUP BY mh.user_no
            ),
            two_months_ago_scores AS (
        SELECT
            mh.user_no,
            SUM(mh.mile_history_point) AS two_months_ago_total_point,
            MAX(mh.mile_history_date) AS base_date
        FROM mile_history mh
        WHERE YEAR(mh.mile_history_date) = YEAR(CURDATE())
          AND MONTH(mh.mile_history_date) = MONTH(CURDATE()) - 2
        GROUP BY mh.user_no
            ),
            user_scores AS (
        SELECT
            COALESCE(rpm.user_no, tma.user_no) AS user_no,
            COALESCE(rpm.recent_previous_month_total_point, 0) AS recent_previous_month_total_point,
            COALESCE(tma.two_months_ago_total_point, 0) AS two_months_ago_total_point,
            COALESCE(rpm.base_date, tma.base_date) AS base_date
        FROM recent_previous_month_scores rpm
            LEFT JOIN two_months_ago_scores tma ON rpm.user_no = tma.user_no

        UNION

        SELECT
            COALESCE(rpm.user_no, tma.user_no) AS user_no,
            COALESCE(rpm.recent_previous_month_total_point, 0) AS recent_previous_month_total_point,
            COALESCE(tma.two_months_ago_total_point, 0) AS two_months_ago_total_point,
            COALESCE(rpm.base_date, tma.base_date) AS base_date
        FROM recent_previous_month_scores rpm
            RIGHT JOIN two_months_ago_scores tma ON rpm.user_no = tma.user_no
        WHERE rpm.user_no IS NULL
            )
        SELECT
            RANK() OVER (ORDER BY (us.recent_previous_month_total_point - us.two_months_ago_total_point) DESC) AS ranking,
                u.user_name,
            us.recent_previous_month_total_point - us.two_months_ago_total_point AS score_increase,
            us.base_date,
            us.user_no
        FROM user_scores us
                 JOIN user u ON us.user_no = u.user_no
        ORDER BY ranking
            LIMIT 5;
        ]]>
    </select>

    <select id="mileByAge" resultType="com.kbstar.mileEasy.beans.MileByAge">
        SELECT
            (SUM(CASE
                     WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 20 AND 29
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 20 AND 29
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile20,
            (SUM(CASE
                     WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 30 AND 39
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 30 AND 39
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile30,
            (SUM(CASE
                     WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 40 AND 49
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) BETWEEN 40 AND 49
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile40,
            (SUM(CASE
                     WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) >= 50
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN TIMESTAMPDIFF(YEAR, u.user_birth, CURDATE()) >= 50
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile50,
            TIMESTAMPDIFF(YEAR, u_target.user_birth, CURDATE()) AS user_age,
            (SELECT SUM(ms_target.mile_score_point)
             FROM mile_score ms_target
             WHERE ms_target.user_no = #{user_no}) AS user_sum,
            (SELECT mile_score_date from mile_score order by mile_score_date DESC LIMIT 1) AS mile_date
        FROM mile_score ms
                 JOIN user u ON ms.user_no = u.user_no
                 JOIN user u_target ON u_target.user_no = #{user_no}
        GROUP BY u_target.user_no;

    </select>

    <select id="mileByPosition" resultType="com.kbstar.mileEasy.beans.MileByPosition">
        SELECT
            (SUM(CASE
                     WHEN u.position_no = 1
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.position_no = 1
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile_position1,
            (SUM(CASE
                     WHEN u.position_no = 2
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.position_no = 2
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile_position2,
            (SUM(CASE
                     WHEN u.position_no = 3
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.position_no = 3
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile_position3,
            (SUM(CASE
                     WHEN u.position_no = 4
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.position_no = 4
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile_position4,
            (SUM(CASE
                     WHEN u.position_no = 5
                         THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.position_no = 5
                                                     THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS mile_position5,
            u_target.position_no AS user_position,
            (SELECT SUM(ms_target.mile_score_point)
             FROM mile_score ms_target
             WHERE ms_target.user_no = #{userNo}) AS user_sum,
            (SELECT mile_score_date from mile_score order by mile_score_date DESC LIMIT 1) AS mile_date
        FROM mile_score ms
                 JOIN user u ON ms.user_no = u.user_no
                 JOIN user u_target ON u_target.user_no = #{userNo}
        GROUP BY u_target.user_no;
    </select>

    <select id="mileByJob" resultType="com.kbstar.mileEasy.beans.MileByJob">
        SELECT
            (SUM(CASE
                     WHEN u.job_no = 1 THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.job_no = 1 THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS job1,
            (SUM(CASE
                     WHEN u.job_no = 2 THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.job_no = 2 THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS job2,
            (SUM(CASE
                     WHEN u.job_no = 3 THEN ms.mile_score_point
                     ELSE 0
                END) / NULLIF(COUNT(DISTINCT CASE
                                                 WHEN u.job_no = 3 THEN u.user_no
                                                 ELSE NULL
                END), 0)) AS job3,
            (SELECT SUM(ms_target.mile_score_point)
             FROM mile_score ms_target
             WHERE ms_target.user_no = #{userNo}) AS user_sum,
            (SELECT mile_score_date
             FROM mile_score
             ORDER BY mile_score_date DESC
                LIMIT 1) AS mile_date,
     (SELECT job_name from user u INNER JOIN job j on u.job_no = j.job_no where user_no=#{userNo})
     AS user_job
        FROM mile_score ms
            JOIN user u ON ms.user_no = u.user_no
            JOIN user u_target ON u_target.user_no = #{userNo}
        GROUP BY u_target.user_no;
    </select>

    <insert id="moveMileExcelToHistory">
        insert into mile_excel_history (mile_no, mile_excel_history_file)
        select mile_no, mile_excel_file
        from mile_excel
        where mile_excel_no=#{mile_excel_no};
    </insert>

    <delete id="deleteAllMileExcel">
        delete from mile_excel where mile_excel_no=#{mile_excel_no};
    </delete>

    <insert id="moveScoreToHistory">
        insert into mile_history (user_no, mile_no, mile_history_date, mile_history_name, mile_history_point)
        select user_no, mile_no, mile_score_date, mile_score_name, mile_score_point
        from mile_score
        where mile_score_date=#{mile_score_date} and mile_no=#{mile_no};
    </insert>

    <delete id="deleteScore">
        delete from mile_score where mile_score_date=#{mile_score_date} and mile_no=#{mile_no};
    </delete>

    <select id="deleteMile" >
        UPDATE mileage
        SET mile_is_delete = 1
        WHERE mile_no =  #{mileNo};
    </select>

    <select id="lastUpdate" resultType="com.kbstar.mileEasy.dto.MileScore">
    <![CDATA[
        -- 현재 날짜의 직전 달의 시작일과 마지막 일 계산
        WITH DateRanges AS (
            SELECT
                DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01') AS start_of_previous_month,
                LAST_DAY(CURDATE() - INTERVAL 1 MONTH) AS end_of_previous_month
        ),
-- 날짜 통합
             Combined AS (
                 SELECT mile_no, mile_history_date AS date
        FROM mile_history
        UNION ALL
        SELECT mile_no, mile_score_date AS date
        FROM mile_score
            ),
-- 전달 범위 내 데이터 필터링
            Filtered AS (
        SELECT
            mile_no,
            date
        FROM Combined
            JOIN DateRanges
        ON Combined.date BETWEEN DateRanges.start_of_previous_month AND DateRanges.end_of_previous_month
            ),
-- 각 mile_no별 최신 날짜 찾기
            Ranked AS (
        SELECT
            mile_no,
            date,
            ROW_NUMBER() OVER (PARTITION BY mile_no ORDER BY date DESC) AS rn
        FROM Filtered
            ),
-- mileage 테이블과의 조인 및 mile_no가 없는 경우 처리
            MileNoCheck AS (
        SELECT
            m.mile_no,
            IFNULL(r.date, NULL) AS date
        FROM mileage m
            LEFT JOIN Ranked r
        ON m.mile_no = r.mile_no AND r.rn = 1
        WHERE m.mile_is_delete = 0
            )
-- 최신 날짜 선택
        SELECT mile_no, date
        FROM MileNoCheck;


        ]]>
</select>

    <update id="updateMilename" >
        UPDATE mileage
        SET mile_name = #{mileNameInput}
        WHERE mile_no = #{mileNo};
    </update>

    <update id="updateMileMax" >
        UPDATE mileage
        SET mile_max = #{mileMax}
        WHERE mile_no = #{mileNo};
    </update>


    <insert id="addMileage">
        INSERT INTO mileage (mile_no,mile_name, mile_max, mile_description, mile_is_branch)
        VALUES (#{mile_no},#{mileageName}, #{mileageLimit}, ' ', #{requestIsBranch, jdbcType=INTEGER, javaType=Integer})
    </insert>



    <select id="getMaxMileNo" resultType="int">
        SELECT MAX(mile_no) FROM mileage
    </select>

    <!-- mile_description 업데이트 쿼리 -->
    <update id="updateMileageDescription">
        UPDATE mileage
        SET mile_description = CONCAT('/mileageDetail/', #{mile_no})
        WHERE mile_no = #{mile_no}
    </update>

    <update id="updateUser">
        UPDATE user
        SET
            user_is_manager = 1,
            mile_no = #{mileNo}
        WHERE FIND_IN_SET(user_no, #{manager}) > 0;
    </update>

    <update id="deleteDetail">
        DELETE FROM mileage_detail
        WHERE mile_no = #{mileNo};
    </update>

    <update id="adminDelete">
        UPDATE user SET user_is_manager = 0, mile_no = null
        WHERE mile_no = #{mileNo};
    </update>


    <select id="allScore" resultType="com.kbstar.mileEasy.dto.MileScore">
        SELECT
            ms.mile_no,
            m.mile_name,
            ms.user_no,
            SUM(ms.mile_score_point) AS total_score
        FROM mile_score ms
                 JOIN mileage m ON ms.mile_no = m.mile_no
        GROUP BY ms.mile_no, m.mile_name, ms.user_no
        ORDER BY total_score DESC
            LIMIT 10;


    </select>

    <select id="myScore" resultType="com.kbstar.mileEasy.dto.MileScore">
        -- mile_is_delete가 0인 mileage 테이블의 항목만 포함시키고,
-- mile_no가 없으면 total_score를 0으로 설정
        WITH mile_scores AS (
            SELECT
                m.mile_name,
                s.mile_no,
                COALESCE(SUM(s.mile_score_point), 0) AS total_score
            FROM
                mileage m
                    LEFT JOIN mile_score s ON m.mile_no = s.mile_no AND s.user_no = #{usesrNo}
            WHERE
                m.mile_is_delete = 0
            GROUP BY
                m.mile_name, s.mile_no
        )
        SELECT
            mile_name,
            mile_no,
            total_score
        FROM
            mile_scores;

    </select>

    <select id="avgScore" resultType="com.kbstar.mileEasy.dto.MileScore">
        WITH TotalScores AS (
            SELECT
                mile_no,
                SUM(mile_score_point) AS total_score
            FROM mile_score
            GROUP BY mile_no
        ),
             UserCounts AS (
                 SELECT
                     mile_no,
                     COUNT(DISTINCT user_no) AS user_count
                 FROM mile_score
                 GROUP BY mile_no
             )
        SELECT
            m.mile_name,
            t.mile_no,
            t.total_score / u.user_count AS average_score
        FROM TotalScores t
                 JOIN UserCounts u ON t.mile_no = u.mile_no
                 JOIN mileage m ON t.mile_no = m.mile_no
        ORDER BY t.mile_no;

    </select>


    <select id="percentageScore" resultType="com.kbstar.mileEasy.dto.MileScore">
        WITH UserTotalScores AS (
            -- Calculate total points for each user
            SELECT
                user_no,
                SUM(mile_score_point) AS total_point
            FROM mile_score
            GROUP BY user_no
        ),

             PercentileCalculation AS (
                 -- Calculate percentile rank for all users
                 SELECT
                     user_no,
                     total_point,
                     PERCENT_RANK() OVER (ORDER BY total_point DESC) AS percentile_rank
                 FROM UserTotalScores
             )

-- Select the percentile rank for the specified user
        SELECT
            percentile_rank * 100 AS user_percentile
        FROM PercentileCalculation
        WHERE user_no = #{userNo};

    </select>

    <select id="myGroup" resultType="com.kbstar.mileEasy.dto.MileScore">
        SELECT sg.group_no, sg.group_name
        FROM user u
                 JOIN sales_group sg ON u.group_no = sg.group_no
        WHERE u.user_no = #{userNo};
    </select>

    <select id="group_weight" resultType="com.kbstar.mileEasy.dto.MileScore">
        SELECT
            gw.weight,
            m.mile_name
        FROM
            user u
                JOIN
            group_weight gw ON u.group_no = gw.group_no
                JOIN
            mileage m ON gw.mile_no = m.mile_no
        WHERE
            u.user_no = #{userNo};

    </select>

    <select id="group_weight_avg" resultType="com.kbstar.mileEasy.dto.MileScore">
        SELECT
            m.mile_name,
            COALESCE(SUM(ms.mile_score_point * (gw.weight + 1)) / NULLIF(COUNT(DISTINCT ms.user_no), 0), SUM(ms.mile_score_point) / NULLIF(COUNT(DISTINCT ms.user_no), 0)) AS weighted_average
        FROM
            user u
                JOIN
            mile_score ms ON u.user_no = ms.user_no
                LEFT JOIN
            (SELECT mile_no, SUM(weight) AS weight
             FROM group_weight
             WHERE group_no = #{groupNo}
             GROUP BY mile_no) gw ON ms.mile_no = gw.mile_no
                JOIN
            mileage m ON ms.mile_no = m.mile_no
        WHERE
            u.group_no = #{groupNo}
        GROUP BY
            ms.mile_no, m.mile_name;

    </select>
    <select id="my_weight_avg" resultType="com.kbstar.mileEasy.dto.MileScore">
        WITH user_score AS (
            SELECT
                ms.mile_no,
                SUM(ms.mile_score_point) AS total_mile_score_point
            FROM mile_score ms
            WHERE ms.user_no = #{userNo}
            GROUP BY ms.mile_no
        ),

             weight_summary AS (
                 SELECT
                     gw.mile_no,
                     COALESCE(SUM(gw.weight), 0) AS total_weight
                 FROM group_weight gw
                 WHERE gw.group_no = #{groupNo}
                 GROUP BY gw.mile_no
             )

        SELECT
            m.mile_name,
            us.total_mile_score_point,
            COALESCE(ws.total_weight + 1, 1) AS weight_adjusted,
            us.total_mile_score_point * COALESCE(ws.total_weight + 1, 1) AS weighted_score
        FROM
            user_score us
                LEFT JOIN
            weight_summary ws ON us.mile_no = ws.mile_no
                JOIN
            mileage m ON us.mile_no = m.mile_no;

    </select>



</mapper>
